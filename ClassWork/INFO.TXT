cd - смена директории в командной строке
dir - содержимое директории
javac - компиляция в байт код
java - вызов виртуальной машины и исполнение в ней программы
class ИмяКласса - всегда с большой буквы аналогично с названием файла.
args в main - это аргументы командной строки
______________________________________
Программа - алгоритм + структура данных
алгоритм - последовательность действий с пятью свойствами:
1) ввод
2) вывод
3) эффективность
4) конечность
5) однозначность/детерменированность
Теорема Бема-Якоппини - любой алгоритм можно выразить с помощью комбинации трех структур управления (на доске).  
_____________________________________________
УСТАНОВКА JDK:
JRE - Java Runtime Environment - Java окружение для выполнения программ (JVM)
JDK - JavaDevelopmentKit - набор инструментов (javac)
Установить JDK:
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
<прописать путь к javac> переменные среды windows 10 java
java -version
javac -version в cmd либо в git bush
ПОДГОТОВКА К ДОМАШКЕ:
а) Скачать git for windows https://git-scm.com/downloads
б) установить Git Bush Only 
в) Регистрация https://github.com/
г) Скидываете мне ссылку на git: https://github.com/ВашЛогин в диалог
д) Переходите во вкладку Repositories
е) Нажимете кнопку new
ж) В Repository name вводите JAVA_IT_PARK_WORK
з) Нажимаете Create Repository
и) В пункте Quick Setup копируете строку с ссылкой
к) Запускаете Git Bush
л) Вводите cd Desktop
м) Вводите git clone https://github.com/ВашеИмя/JAVA_IT_PARK_WORK.git
н) Устанавливаете Sublime Text и открываете эту папочку в нем
о) Теперь вся ваша работа ведется в этой папке
п) Сделали всю свою работу - создаете папку HomeWorks - и в ней подпапки TaskНомерЗадачи
В каждой папке Program.java
р) В Git Bush делаете git status
c) git add .
т) делаем git commit -m 'add homework'
у) git push origin master - только один раз (потом git push).
ЗАМЕЧАНИЕ: 
Перед первым коммитом надо будет сделать
git config —global user.email [email регистрации]
git config —global user.name [ваше имя]
______________________________
ДЗ:
1. Посчитать произведение простых чисел в последовательности ( пока не -1)
2. Посчитать сумму чисел, порядок вхождения которых - четное число
34 - 1
56 - 2
78 - 3
21 - 4
-1
3. Посчитать произведение чисел, сумма цифр которых - простое число.
4. Развернуть массив на месте
5. Сумма элементов массива
6. прозизведение четных элементов массива, стоящих на нечетных позициях.
-------------------------------------------
Типы данных в java: int, double, boolean, char, short, byte, long, float (примитивные типы) - переменные данного типа, непосредственно хранят в себе значение.

Ссылочные - массивы.
------------------------------------
ДЗ:
7) Найти количество локальных максимумов в массиве. 
a[i-1]<a[i]>a[i+1], i = 1..n-2
Например: 1, 3, 2, 5, 4, 3, 1; - 3 и 5 - локальные максимумы

---------------------
Многомерные массивы в java - массив массивов
Функция:

public static ТИП_ВОЗВР_ЗНАЧЕНИЯ имя_функции(список_формальных_параметров) {
	// тело функции
	return значение;
}

Функции с одинаковыми названиями, но разными формальными параметрами называются перегруженными.

ДЗ:
В виде процедур и функций:
8) Найти среднее арифмитические в матрице
9) Найти минимальный элемент в каждой строке матрицы
10) Обнулить все элементы главной диагонали квадратной матрицы
11) Обнулить все элементы на побочной диагонали
12) Сделать разворот против часовой стрелки в квадратной матрице
13) Найти максимальный элемент в каждом столбце матрицы
14) Написать функцию проверки числа на простоту. (boolean-функция)
15) Написать функцию, возвращающую сумму цифр числа
----------------------------
ЗНАЕМ:
java - исполняет
javac - компилирует
Типы данных в java - примитивные/ссылочные
Переменные + явное/неявное приведение, операции / и %
if, while, for
функции и процедуры
Массивы - явная инициализация, многомерные массивы
Алгоритмы: поиск минимального, максимального, поменять местами значения, среднее арифметическое
Git - git clone, git add ., git commit, git push, git pull

Рекурсия - стек вызовов, терминальное условие рекурсии.

Ряд Фибонначи 
x[n] = x[n-1] + x[n-2], x[0] = 1, x[1] =1

x[2] = 2
x[3] = 3
x[4] = 5

ДЗ:
16) Оптимизировать вычисление Фибонначи
-------------------------------------------
Сортировка простыми вставками:

[42] [13] [5] [-10] [11] [2] [10]
   0    1   2     3    4   5    6

[0..6]
a = 0
b = 6
Минимальный элемент: -10
Меняем x[0] -> x[3], получаем:
[-10] [13] [5] [42] [11] [2] [10]

Теперь а = 1
[1..6], там минимальный - 2
 Определяем промежуток индексов [a..b]. 
 В этом промежутке находим минимальное число. Далее, заменяем минимальное число с числом x[a], изменяем промежуток a = a + 1, повторяем вычисления.
--------------------------------
ООП:
Парадигма программирования - способ организации вычислений внутри программы + стиль мышления программиста при решении задачи
Процедурная парадигма программирования: программа = алгоритм + структура данных
Функциональная парадигма:
программа - есть функция
Парадигма логического программирования: программа = набор логических предикатов (функции с true и false).
Парадигма ООП:
программа = объекты, которые обмениваются сообщениями.

ООП оперирует понятиями классов и объектов.

Объект - конкретная сущность, обладающая состоянием (свойствами) и поведением (действия).

Класс - абстрактный тип данных. Класс описывает то, каким поведением будут обладать созданные на основе класса объекты, и какие возможные состояния они могут иметь.

Возможное состояние объекта задается в классе.Задается с помощью полей (fields).

Инстантивация - выделение памяти и создание объекта (оператор new).

Инициализация - задание начального состояния

Конструктор - инициализатор (не является членом класса) - задачей конструктора является присвоение начальных значений полям объекта при создании.

Конструктор по умолчанию - конструктор, определенный для всех классов изначально. Конструктор по умолчанию имеет вид ClassName();
Он присваивает полям нулевые значения
int -> 0
double -> 0.0
String -> null
Для ссылочных типов -> null
boolean -> false
char - '\0'
Конструкторы можно переопределять. Как только вы описали свой конструктор, конструктор по умолчанию - отключается

ООП-разработчик:

Роль 1 - разработчик класса
Роль 2 - пользователь класса

Иногда возникает необходимость предоставить пользователю класса возможность проинициализировать объект своими данными. Для этого следует определить конструктор с параметрами

Инкапсуляция:
1) Совмещение алгоритмов и структур данных в одной сущности - классе.
Алгоритмы в классе реализуются в виде функций, структуры данных в виде полей.
Функции и процедуры внутри класса называются методами.
Методы - члены класса.
2) Защита внутренней структуры данных с помощью модификатора private - закрывает доступ к члену класса извне.

Поля всегда защищаем модификатор private
Если необходимо читать/изменять - делаем методы доступа - сеттеры геттеры.
Если необходимо только читать - только геттеры

5 классная) Описать класс Рациональное число
RaionalNumber.java
поля - числитель, знаменатель
конструктор с параметрами и без
метод нормализации - 5/2, метод должен вернуть 2.5

1) Один файл - один класс
2) Никакого транслита
3) int x = 6;
4) class Class {}

Объектные переменные (ссылочные переменные, указывающие на объект)

Модификаторы доступа:
public 
private
protected

Четыре уровня доступа
Открытый - public
Закрытый - private
Защищенный - protected
package internal - нет

Статическое поле - поле, глобальное для всех объектов класса.
Значение статического поля можно задать вызвав класс.

Статический инициализатор - инициализирует значения статических полей - работает ТОЛЬКО со статическими полями.

Статический метод - метод, вызов которого возможен без создания объекта, непосредственно из класса.

РЕЗЮМЕ:
Класс состоит из:
Закрытых полей
Конструкторов
Методы доступа
Прочие методы
Статические поля
Статические методы
Статические инициализаторы

n * n ~ O(n^2)

n^3 + n^2 + n ~ O(n^3)

СРЕДНИЙ ЛУЧШИЙ СЛУЧАЙ O(N * logN)
-------------------

Сортировка слиянием.

Слияние:
c[] <- merge(a[], b[])
a = {4, 5, 7, 10, 11}
b = {1, 2, 6, 8, 9, 13};

4 ~ 1 
c <- 1
4 ~ 2
c <- 2
4 ~ 6
c <-4
5 ~ 6
c <- 5
и т.д.

Реализовать класс Sort, в нем
статический метод merge(int a[], int b[])
https://github.com/IlyasGaynulin/JAVA_IT_PARK_WORK/blob/master/ClassWorks/Task6/Sort.java

Сортировка слиянием:

с = 10 -8 1 2 4 3 1 0
a = {10, -8, 1, 2}
b = {4, 3, 1, 0}
Сортировать c: 
 - Сортировать a
   - положить, что c = a
   	 c = {10, -8, 1, 2}
   	 a = {10, -8}
   	 b = {1, 2}
   	 Сортировать a, сортировать b
   	 Слить a и b
   	 - положить, что c = a
   	 c = {10, -8}
   	 a = {10}
   	 b = {-8}
   	 c <- {-8, 10};
Сортировать b
Слить а и b

ДЗ:
17) Создать массив людей, сортировать пузырьком по возрасту
18) Вывести количество всех возрастов от 1 до 120;
ДОП: разобрать код merge